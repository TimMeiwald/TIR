<Alphabet_Upper> PASSTHROUGH ="A"/"B"/"C"/"D"/"E"/"F"/"G"/"H"/"I"/"J"/"K"/"L"/"M"/"N"/"O"/"P"/"Q"/"R"/"S"/"T"/"U"/"V"/"W"/"X"/"Y"/"Z";
<Alphabet_Lower> PASSTHROUGH ="a"/"b"/"c"/"d"/"e"/"f"/"g"/"h"/"i"/"j"/"k"/"l"/"m"/"n"/"o"/"p"/"q"/"r"/"s"/"t"/"u"/"v"/"w"/"x"/"y"/"z";
<Num> PASSTHROUGH = "0"/"1"/"2"/"3"/"4"/"5"/"6"/"7"/"8"/"9";
<Spaces> PASSTHROUGH = "\t"/"\r"/" ";
<Specials> PASSTHROUGH = "+"/"*"/"-"/"&"/"!"/"?"/"<"/">"/"""/"("/")"/"_"/","/"/"/";"/"="/"\"/"#"/":"/"|"/"."/"'"/"%";
<ASCII> PASSTHROUGH = <Alphabet_Lower>/<Alphabet_Upper>/<Num>/<Spaces>/<Specials>; #Need to update packratparsergenerator to allow e.g uint[0-27] rather than needing to write everything out manually #

<newline> DELETE = "\n";
<space> DELETE = " "+;
<whitespace> DELETE = " "*;
<equals> DELETE = "=";
<underscore> DELETE = "_";
<open_square_bracket> DELETE = "[";
<close_square_bracket> DELETE = "]";
<open_bracket> DELETE = "(";
<close_bracket> DELETE = ")";
<Is> DELETE = "i", "s";
<comma> DELETE = ",";

<integer> PASSTHROUGH = "-"?, (((!"0", <Num>), <Num>*)/"0"); 
<variable> COLLECT = (<Alphabet_Lower>/<Alphabet_Upper>/"_"), (<Alphabet_Lower>/<Alphabet_Upper>/"_"/<Num>)*;
<line_terminator> DELETE = <whitespace>, <newline>;

<size> COLLECT = <integer>;
<quantity> COLLECT = <integer>;
<memory_allocator> = <type_identifier>, <underscore>, <size>, (<open_square_bracket>, <quantity>,<close_square_bracket>)?;


<int_identifier> COLLECT = "i", "n", "t";
<float_identifier> COLLECT = "f", "l", "o", "a", "t";
<type_identifier> PASSTHROUGH = <int_identifier>/<float_identifier>;


<plus> DELETE = "+";
<minus> DELETE = "-";
<forward_slash> DELETE = "/";
<star> DELETE = "*";

<s_greater_than> DELETE = ">";
<s_greater_than_or_equals> DELETE = ">", "=";
<s_less_than> DELETE = "<";
<s_less_than_or_equals> DELETE = "<", "=";
<s_equals> DELETE = "=", "=";
<c_greater_than_or_equals> = (<variable>/<data>), <whitespace>, <s_greater_than_or_equals>, <whitespace>, (<variable>/<data>);
<c_greater_than> = (<variable>/<data>), <whitespace>, <s_greater_than>, <whitespace>, (<variable>/<data>);
<c_less_than> = (<variable>/<data>), <whitespace>, <s_less_than>, <whitespace>, (<variable>/<data>);
<c_less_than_or_equals> = (<variable>/<data>), <whitespace>, <s_less_than_or_equals>, <whitespace>, (<variable>/<data>);
<c_equals> =  (<variable>/<data>), <whitespace>, <s_equals>, <whitespace>, (<variable>/<data>);
<comparison_operator> PASSTHROUGH = <c_greater_than_or_equals>/<c_less_than_or_equals>/<c_greater_than>/<c_less_than>/<c_equals>;

<add> = (<variable>/<data>), <whitespace>, <plus>, <whitespace>, (<variable>/<data>);
<subtract> = (<variable>/<data>), <whitespace>, <minus>, <whitespace>, (<variable>/<data>);
<division> = (<variable>/<data>), <whitespace>, <forward_slash>, <whitespace>, (<variable>/<data>);
<multiplication> = (<variable>/<data>), <whitespace>, <star>, <whitespace>, (<variable>/<data>);

<maths> PASSTHROUGH = <whitespace>, (<add>/<subtract>/<division>/<multiplication>), <whitespace>;


<function_call> = <whitespace>, <variable>, <open_bracket>, ((<data>/<variable>)?, <whitespace>, (<comma>, <whitespace>, (<data>/<variable>), <whitespace>)*, <whitespace>)?, <close_bracket>, <whitespace>;
<if_identifier> DELETE = "i", "f";
<else_identifier> DELETE = "e", "l", "s", "e";
<scope_open> DELETE = "{";
<scope_close> DELETE = "}";
<if_statement> = <whitespace>, <if_identifier>, <space>, <comparison_operator>;
<else_statement> = <whitespace>, <else_identifier>;

<if_else_block> =   <if_statement>, <space>, <scope_open>, <whitespace>, <line_terminator>, <TEXT_statement>+, <scope_close>, <line_terminator>, 
                    (<else_statement>, <space>, <scope_open>, <line_terminator>, <whitespace>, <TEXT_statement>+, <scope_close>, <line_terminator>)?;


<int> COLLECT = <integer>;
<data> PASSTHROUGH = <int>;

<BSS_statement> = <variable>, <whitespace>, <equals>, <whitespace>, <memory_allocator>, <line_terminator>;
<DATA_statement> = <variable>, <whitespace>, <equals>, <whitespace>, <memory_allocator>, <space>, <Is>, <space>, <data>, <line_terminator>; # Rodata and data handling is same one is just readonly#
<TEXT_statement> =  (<variable>, <whitespace>, <equals>, (<maths>/<function_call>/(<whitespace>, <data>)/(<whitespace>, <variable>)), <line_terminator>)
                    / (<whitespace>, <if_else_block>) ;

<RODATA_identifier> DELETE = "R", "O", "D", "A", "T", "A";
<DATA_identifier> DELETE = "D", "A", "T", "A";
<BSS_identifier> DELETE = "B", "S", "S";
<TEXT_identifier> DELETE = "T", "E", "X", "T";


<RODATA> = <RODATA_identifier>, <line_terminator>, (<DATA_statement>/<newline>)*;
<DATA> = <DATA_identifier>, <line_terminator>, (<DATA_statement>/<newline>)*;
<BSS> = <BSS_identifier>, <line_terminator>, (<BSS_statement>/<newline>)*;
<TEXT> = <TEXT_identifier>, <line_terminator>, (<TEXT_statement>/<newline>)*;


<grammar> = <DATA>?, <newline>*, <RODATA>?, <newline>*, <BSS>?, <newline>*, <TEXT>, <newline>*;